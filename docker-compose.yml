services:
  # --- Kafka Ecosystem ---
  zookeeper:
    image: bitnami/zookeeper:3.9
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - stocknet
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: bitnami/kafka:3.7
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - kafka_data:/bitnami/kafka
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9093,EXTERNAL_PLAINTEXT://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL_PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://0.0.0.0:9093,EXTERNAL_PLAINTEXT://0.0.0.0:9094
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LOG_RETENTION_MS=604800000 
      - KAFKA_CFG_LOG_SEGMENT_BYTES=1073741824
      - KAFKA_CFG_LOG_CLEANUP_POLICY=delete
      - KAFKA_CFG_MESSAGE_MAX_BYTES=10485760
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - stocknet
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9093 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.1
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9093
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_SCHEMA_COMPATIBILITY_LEVEL: BACKWARD
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/subjects || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - stocknet

  # --- Databases ---
  influxdb:
    image: influxdb:2.7
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=password
      - DOCKER_INFLUXDB_INIT_ORG=stockifai
      - DOCKER_INFLUXDB_INIT_BUCKET=stockdata
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=mySuperSecretToken123!
      - DOCKER_INFLUXDB_INIT_TOKEN=mySuperSecretToken123!
      - INFLUXD_LOG_LEVEL=debug
    networks:
      - stocknet
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8086/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  cassandra:
    image: cassandra:4.1
    ports:
      - "9042:9042"
    volumes:
      - cassandra_data:/var/lib/cassandra
    environment:
      - CASSANDRA_CLUSTER_NAME=MyStockCluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - MAX_HEAP_SIZE=2G
      - HEAP_NEWSIZE=512M
      - JVM_OPTS=-Dcassandra.skip_wait_for_gossip_to_settle=0 -Dcassandra.initial_token=0
    ulimits:
      memlock: -1
      nproc: 32768
      nofile: 100000
    networks:
      - stocknet
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 30s
      timeout: 10s
      retries: 10

  # --- Applications ---
  stream:
    build:
      context: .
      dockerfile: stream/Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9093
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9093
      - FINNHUB_API_KEY=${FINNHUB_API_KEY}
      - FRED_API_KEY=${FRED_API_KEY}
      - MONITORED_STOCKS=${MONITORED_STOCKS}
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    networks:
      - stocknet
    ports:
      - "8088:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/stream/actuator/health || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    ports:
      - "8000:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9093
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9093
      - SPRING_DATA_CASSANDRA_CONTACT_POINTS=cassandra
      - SPRING_DATA_CASSANDRA_PORT=9042
      - SPRING_DATA_CASSANDRA_LOCAL_DATACENTER=datacenter1
      - SPRING_DATA_CASSANDRA_KEYSPACE_NAME=stock_keyspace
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=mySuperSecretToken123!
      - INFLUXDB_ORG=stockifai
      - INFLUXDB_BUCKET=stockdata
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
    depends_on:
      kafka:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      schema-registry:
         condition: service_healthy
    networks:
      - stocknet
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  spark:
    build:
      context: .
      dockerfile: spark/Dockerfile
    environment:
      - SPARK_MASTER_URL=local[*]
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9093
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - CASSANDRA_HOST=cassandra
      - CASSANDRA_PORT=9042
      - CASSANDRA_KEYSPACE=stock_keyspace
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=mySuperSecretToken123!
      - INFLUXDB_ORG=stockifai
      - INFLUXDB_BUCKET=stockdata
      - INFLUXDB_DATABASE=stockdata
    mem_limit: 4g
    mem_reservation: 2g
    depends_on:
      kafka:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      stream:
        condition: service_healthy
    networks:
      - stocknet
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep '[j]ava.*RiskCalculationEngine' || exit 1"]
      interval: 60s
      timeout: 15s
      retries: 5
      start_period: 180s

  # --- Monitoring & Visualization ---
  prometheus:
    image: prom/prometheus:v2.51.2
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - stocknet

  grafana:
    image: grafana/grafana:10.4.2
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/prometheus/grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
      - INFLUXDB_TOKEN=mySuperSecretToken123!
      - GF_LOG_LEVEL=info
    depends_on:
      - prometheus
      - influxdb
    networks:
      - stocknet
    restart: unless-stopped

  frontend:
      build:
        context: ./frontend
        dockerfile: Dockerfile
      ports:
        - "3001:80"
      environment:
        REACT_APP_API_URL: ""
      depends_on:
        - api
      networks:
        - stocknet
      restart: unless-stopped

# --- Volumes ---
volumes:
  zookeeper_data:
  kafka_data:
  influxdb_data:
  cassandra_data:
  prometheus_data:
  grafana_data:

# --- Networks ---
networks:
  stocknet:
    driver: bridge